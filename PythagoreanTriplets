import java.util.*;

class PythagoreanTriplet {
    int a = 1;
    int b = 1;
    int c;
    List<PythagoreanTriplet> triplets = new ArrayList<>();
 
 /*Parameterized constructor*/
 
    PythagoreanTriplet(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }

/*Default Const*/

    PythagoreanTriplet() {
    }
 
    boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PythagoreanTriplet p = (PythagoreanTriplet) o;
        return a == p.a && b == p.b && c == p.c;
    }

     int hashCode() {
        return Objects.hash(a, b, c);
    }

    PythagoreanTriplet makeTripletsList() {
        triplets.clear();
        return new PythagoreanTriplet();
    }
  
    PythagoreanTriplet Helper(int factMax) {
        if (a < factMax / 2) {
            if (a <= b) {
                b++;
            }
            if (b == factMax) {
                a++;
                b = a + 1;
            }
        }
        return this;
    }

    public PythagoreanTriplet SumToBeEqual(int sumMax) {
        while (a < sumMax/2 && (Math.pow(a, 2) + Math.pow(b, 2)) != Math.pow((sumMax - a - b), 2)) {
            Helper(sumMax);
        }
        if (a < sumMax / 2) {
            c = (int) Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
        }
        return this;
    }
 
    public List<PythagoreanTriplet> build() {
        int max = a+b+c;
        while (a < max/2) {
            triplets.add(new PythagoreanTriplet(a, b, c));
            Helper(max).SumToBeEqual(max);
        }
        return triplets;
    }
}
